import os
import random
import string
import subprocess
import asyncio
import platform
from telethon import events, TelegramClient
from datetime import datetime, timedelta
from config import TOKEN_FILE, API_ID, API_HASH
import telethon
import requests

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
start_time = datetime.now()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
received_messages_count = 0
sent_messages_count = 0
active_users = set()  # –•—Ä–∞–Ω–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def translate_text(text, target_lang):
    # –ü—Ä–∏–º–µ—Ä –¥–æ–ø—É—Å–∫–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö –ø–∞—Ä
    valid_languages = {
        'en': 'English',
        'es': 'Spanish',
        'fr': 'French',
        'de': 'German',
        'zh-CN': 'Chinese (Simplified)',
        'ru': 'Russian',
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }

    # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —è–∑—ã–∫ –ø–æ —Å–∏–º–≤–æ–ª—É '-'
    lang_parts = target_lang.split('-')
    if len(lang_parts) == 2 and lang_parts[0] in valid_languages:
        lang_code = f"{lang_parts[0]}|{lang_parts[1]}"
    elif target_lang in valid_languages:
        lang_code = f"{target_lang}|{target_lang}"  # –ï—Å–ª–∏ —É–∫–∞–∑–∞–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —è–∑—ã–∫
    else:
        return "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —è–∑—ã–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω—ã–µ –∫–æ–¥—ã ISO."

    url = f"https://api.mymemory.translated.net/get?q={text}&langpair={lang_code}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()["responseData"]["translatedText"]
    else:
        return "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞."

class DeferredMessage:
    def __init__(self, client):  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ __init__
        self.client = client
        self.interval = 3600  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, 1 —á–∞—Å
        self.message_count = 10  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, 10 —Å–æ–æ–±—â–µ–Ω–∏–π

    async def –æ—Ç–ª–æ–∂–∫–∞(self, event):
        global sent_messages_count
        args = event.message.message.split(' ', 3)

        if len(args) < 4:
            await event.edit("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–µ—Ä–∏–æ–¥ (–≤ –º–∏–Ω—É—Ç–∞—Ö) –∏ —Ç–µ–∫—Å—Ç.")
            return
        
        try:
            self.message_count = int(args[1].strip())
            self.interval = int(args[2].strip()) * 60  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
        except ValueError:
            await event.edit("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
            return
        
        text = args[3].strip()
        
        if not text:
            await event.edit("‚úã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

        await event.edit(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
                         f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {self.message_count} —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ {self.interval // 60} –º–∏–Ω—É—Ç(—ã).")

        chat_id = event.chat_id
        
        for i in range(self.message_count):
            send_time = datetime.now() + timedelta(seconds=self.interval * i)
            await self.client.send_message(chat_id, text, schedule=send_time)
            sent_messages_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

def register_event_handlers(client):
    deferred_message = DeferredMessage(client)

    @client.on(events.NewMessage(pattern=r'\.–æ—Ç–ª–æ–∂–∫–∞'))
    async def handler(event):
        global received_messages_count, active_users
        received_messages_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        active_users.add(event.sender_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        await deferred_message.–æ—Ç–ª–æ–∂–∫–∞(event)

    @client.on(events.NewMessage(pattern=r'\.tr (\w{2}(-\w{2})?)'))
    async def translate_handler(event):
        global received_messages_count, active_users
        received_messages_count += 1
        active_users.add(event.sender_id)

        if event.is_reply:
            target_language = event.message.text.split(' ')[1].strip()  # –ö–æ–¥ —è–∑—ã–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            replied_message = await event.get_reply_message()  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ–º
            
            if replied_message:
                text_to_translate = replied_message.message  # –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ - —ç—Ç–æ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
                translated_text = translate_text(text_to_translate, target_language)
                await event.reply(translated_text)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            else:
                await event.reply("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
        else:
            await event.reply("‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏.")

    @client.on(events.NewMessage(pattern=r'\.info'))
    async def info_handler(event):
        uptime = datetime.now() - start_time  # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã 
        uptime_str = str(uptime).split('.')[0]  # –£–±–∏—Ä–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã

        device = platform.system()
        user_name = event.sender.first_name  # –ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        current_status = "–ê–∫—Ç–∏–≤–µ–Ω"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å

        info_message = (
            f"üîç Acroka - UserBot:\n\n"
            f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü {user_name}\n"
            f"üíª –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {device}\n"
            f"‚è≥ Uptime: {uptime_str}\n"
            f"‚ú® –í–µ—Ä—Å–∏—è Telethon: {telethon.version}\n" 
            f"üì• Sent: {received_messages_count}\n"
            f"üì§ Accepted: {sent_messages_count}\n"
            f"üü¢ –°—Ç–∞—Ç—É—Å: {current_status}\n"
            f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users)}\n"
        )

        await event.edit(info_message)

    @client.on(events.NewMessage(pattern=r'\.ping'))
    async def ping_handler(event):
        process = subprocess.Popen(['ping', '-c', '1', 'google.com'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()
        
        if process.returncode == 0:
            result = "‚úÖ –ü–∏–Ω–≥ –∫ Google: –í—Ä–µ–º—è: {}–º—Å".format(stdout.decode().split('time=')[1].split(' ')[0])
        else:
            result = "‚ùå –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞!"

        await event.edit(result)

def generate_username():
    random_part = ''.join(random.choices(string.ascii_letters + string.digits, k=5))
    return f'acroka_{random_part}_bot'

async def create_bot(client):
    botfather = await client.get_input_entity('BotFather')
    bot_title = 'Acroka'

    await client.send_message(botfather, '/newbot')
    await asyncio.sleep(2)
    await client.send_message(botfather, bot_title)
    await asyncio.sleep(2)

    username = generate_username()
    await client.send_message(botfather, username)
    await asyncio.sleep(5)

    async for message in client.iter_messages(botfather, limit=10):
        if 'Use this token to access the HTTP API:' in message.message:
            lines = message.message.split('\n')
            for i, line in enumerate(lines):
                if 'Use this token to access the HTTP API:' in line and i + 1 < len(lines):
                    token = lines[i + 1].strip()
                    break
            else:
                return None, None
            break
    else:
        return None, None

    user_id = token.split(':')[0]
    with open(TOKEN_FILE, 'w') as f:
        f.write(f"{username}:{user_id}:{token}")
    
    return username, user_id, token

async def run_bot(client, token):
    bot_client = TelegramClient('bot', API_ID, API_HASH)
    await bot_client.start(bot_token=token)

    @bot_client.on(events.NewMessage(pattern='/start'))
    async def start_handler(event):
        await event.reply('üëã –ü—Ä–∏–≤–µ—Ç! –Ø - Acroka, —Ç–≤–æ–π userbot!\n\n'
                           'üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π .help.')

    await bot_client.run_until_disconnected()
