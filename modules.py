import os
import random
import string
import subprocess
import asyncio
import platform
from telethon import events, TelegramClient
from datetime import datetime, timedelta
from config import TOKEN_FILE, API_ID, API_HASH
import telethon
import requests
import pyfiglet
from langdetect import detect, DetectorFactory
import re
import importlib.util
import subprocess
import os
import sys




# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
start_time = datetime.now()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
received_messages_count = 0
sent_messages_count = 0
active_users = set()  # –•—Ä–∞–Ω–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

MODS_DIRECTORY = 'source/mods/'  #


client = TelegramClient('bot', API_ID, API_HASH)
 
loaded_modules = []  # –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π



def get_module_info(module_name):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ, –µ—Å–ª–∏ –æ–Ω–∞ –∏–º–µ–µ—Ç—Å—è, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞."""
    try:
        module_path = os.path.join(MODS_DIRECTORY, f"{module_name}.py")
        with open(module_path, 'r', encoding='utf-8') as f:
            # –°—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —á–µ—Ç—ã—Ä–µ —Å—Ç—Ä–æ–∫–∏
            lines = [f.readline().strip() for _ in range(4)]

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
        name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        commands = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫
        for line in lines:
            if line.startswith("#"):
                key, value = line[1:].split(":", 1)  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
                if key.strip() == "name":
                    name = value.strip()
                elif key.strip() == "commands":
                    commands = value.strip()
        
        return f"{name} ({commands})"

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ {module_name}: {e}")
        return None
        
def get_loaded_modules():
    modules = []
    if os.path.exists(MODS_DIRECTORY):
        for filename in os.listdir(MODS_DIRECTORY):
            if filename.endswith(".py"):
                module_name = filename[:-3]  # –£–±–∏—Ä–∞–µ–º ".py"
                modules.append(module_name)
    return modules


async def handle_help(event):
    modules_list = get_loaded_modules()
    commands_list = [
        "üìú info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–±–æ—Ç–µ",
        "üèì ping - –ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã",
        "‚ùì help - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã",
        "üì¶ loadmod - –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å",
        "üîÑ unloadmod - —É–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å",
        "üìú modload - –≤—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å",
        "‚è≥ deferral - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        "üßÆ calc - –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n"
        "üíª tr - –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫"
    ]

    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    new_message_text = "üí° –ö–æ–º–∞–Ω–¥—ã —é–∑–µ—Ä–±–æ—Ç–∞\n\n"

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    if modules_list:
        new_message_text += "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:\n"
        for module in modules_list:
            module_info = get_module_info(module)
            if module_info:
                new_message_text += f"   - {module_info}\n"
    else:
        new_message_text += "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π."

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    new_message_text += "\n‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    new_message_text += "\n".join(commands_list)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await event.message.edit(new_message_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def load_module(module_name):
    try:
        module_spec = importlib.util.spec_from_file_location(module_name, os.path.join(MODS_DIRECTORY, f"{module_name}.py"))
        module = importlib.util.module_from_spec(module_spec)
        module_spec.loader.exec_module(module)
        loaded_modules.append(module_name)
        return module  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è {module_name}: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã .loadmod
async def handle_loadmod(event, client):
    replied_message = await event.get_reply_message()
    if replied_message and replied_message.media:
        file = await replied_message.download_media(file=MODS_DIRECTORY)
        module_name = os.path.splitext(os.path.basename(file))[0]

        module = await load_module(module_name)
        
        if module:
            new_message_text = f"‚úÖ –ú–æ–¥—É–ª—å '{module_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!"
            # –í—ã–∑—ã–≤–∞–µ–º on_load, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if hasattr(module, 'on_load'):
                await module.on_load(client)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º client –≤–º–µ—Å—Ç–æ bot_client
        else:
            new_message_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å '{module_name}'."
    else:
        new_message_text = "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º .py –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è."

    # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–∞–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã .loadmod
    try:
        await event.message.edit(new_message_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def load_all_modules(client):
    for module_file in os.listdir(MODS_DIRECTORY):
        if module_file.endswith('.py'):
            module_name = os.path.splitext(module_file)[0]
            module = await load_module(module_name)
            if module and hasattr(module, 'on_load'):
                await module.on_load(client)  # –í—ã–∑–æ–≤

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã .unloadmod
async def handle_unloadmod(event, module_name):
    module_path = os.path.join(MODS_DIRECTORY, f"{module_name}.py")

    if os.path.isfile(module_path):
        os.remove(module_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        new_message_text = f"‚úÖ –ú–æ–¥—É–ª—å '{module_name}' –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω."
    else:
        new_message_text = f"‚ùå –ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω."

    # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await event.message.edit(new_message_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

DetectorFactory.seed = 0


def translate_text(text, target_lang):
    # –°–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö –ø–∞—Ä
    valid_languages = {
        'en': 'English',
        'es': 'Spanish',
        'fr': 'French',
        'de': 'German',
        'zh-CN': 'Chinese (Simplified)',
        'ru': 'Russian',
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ —Å–ø–∏—Å–∫–µ
    if target_lang not in valid_languages:
        return f"–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —è–∑—ã–∫–∞ '{target_lang}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω—ã–µ –∫–æ–¥—ã ISO, –Ω–∞–ø—Ä–∏–º–µ—Ä: 'en', 'ru' –∏ —Ç.–¥."

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è API –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –∏ —Ü–µ–ª–µ–≤—ã–º —è–∑—ã–∫–æ–º
    url = f"https://api.mymemory.translated.net/get?q={text}&langpair={detect(text)}|{target_lang}"
    
    try:
        response = requests.get(url)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        data = response.json()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ
        if "responseData" in data and "translatedText" in data["responseData"]:
            return data["responseData"]["translatedText"]
        else:
            return "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}."

async def translate_handler(event):
    global received_messages_count, active_users
    received_messages_count += 1
    active_users.add(event.sender_id)

    if event.is_reply:
        target_language = event.message.text.split(' ')[1].strip()  # –¢–æ–ª—å–∫–æ –∫–æ–¥ —è–∑—ã–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        replied_message = await event.get_reply_message()  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ–º
        
        if replied_message:
            text_to_translate = replied_message.message  # –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ - —ç—Ç–æ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
            translated_text = translate_text(text_to_translate, target_language)

            # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            await event.message.edit(translated_text)  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        else:
            await event.reply("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
    else:
        await event.reply("‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏.")

class DeferredMessage:
    def __init__(self, client):
        self.client = client
        self.interval = 3600  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, 1 —á–∞—Å
        self.message_count = 10  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        self.sent_message_id = None  # ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    async def –æ—Ç–ª–æ–∂–∫–∞(self, event):
        global sent_messages_count
        args = event.message.message.split(' ', 3)

        if len(args) < 4:
            await event.reply("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–µ—Ä–∏–æ–¥ (–≤ –º–∏–Ω—É—Ç–∞—Ö) –∏ —Ç–µ–∫—Å—Ç.")
            return
        
        try:
            self.message_count = int(args[1].strip())
            self.interval = int(args[2].strip()) * 60  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
        except ValueError:
            await event.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
            return
        
        text = args[3].strip()
        
        if not text:
            await event.reply("‚úã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

        self.sent_message_id = await event.reply(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
                                                  f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {self.message_count} —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ {self.interval // 60} –º–∏–Ω—É—Ç(—ã).")

        chat_id = event.chat_id
        
        for i in range(self.message_count):
            send_time = datetime.now() + timedelta(seconds=self.interval * i)
            await self.client.send_message(chat_id, text, schedule=send_time)
            sent_messages_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ
            await self.client.edit_message(
                chat_id,
                self.sent_message_id,
                f"üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ {i + 1}/{self.message_count} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! "
                f"–°–ª–µ–¥—É—é—â–µ–µ —á–µ—Ä–µ–∑ {self.interval // 60} –º–∏–Ω—É—Ç(—ã)."
            )

    async def handler(self, event):
        global received_messages_count, active_users
        received_messages_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        active_users.add(event.sender_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        await self.–æ—Ç–ª–æ–∂–∫–∞(event)  # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –æ—Ç–ª–æ–∂–∫–∞

async def calc_handler(event):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    expression = event.message.text.split('.calc ')[1].strip()  # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
    valid_expression = re.sub(r'[^0-9+\-*/. ()]', '', expression)
    
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = eval(valid_expression)
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await event.message.edit(f"üí° –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await event.message.edit(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏: {str(e)}")



def register_event_handlers(client):
    deferred_message = DeferredMessage(client) 
    @client.on(events.NewMessage(pattern=r'\.modload (\w+)'))
    async def modload_command(event):
        module_name = event.pattern_match.group(1)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
        module_path = f"source.mods.{module_name}"

        try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å
            importlib.import_module(module_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –º–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω
            await event.reply(f"‚úÖ –ú–æ–¥—É–ª—å `{module_name}` —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        except ModuleNotFoundError:
        # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
            await event.reply(f"‚ùå –ú–æ–¥—É–ª—å `{module_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
            await event.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è `{module_name}`: {str(e)}")
    @client.on(events.NewMessage(pattern=r'\.update'))
    async def update_handler(event):
        # URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub –æ—Ç ItKenneth
        repository_url = 'https://github.com/ItKenneth/AcrokaUB.git'
        
        # –ü—É—Ç—å, –∫—É–¥–∞ –±—É–¥–µ—Ç –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        repo_directory = '/AcrokaUB'
        # –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–∂–µ '/AcrokaUB', –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–∞–ø—Ä—è–º—É—é —Ç–∞–º)
        project_directory = '/AcrokaUB'  # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ç–æ–º –∂–µ –∫–∞—Ç–∞–ª–æ–≥–µ

        # –§–∞–π–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        files_to_update = ['modules.py', 'config.py', 'main.py']

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            if not os.path.exists(repo_directory):
                await event.reply("–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
                subprocess.run(['git', 'clone', repository_url, repo_directory], check=True)  # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                await event.reply(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω –≤ {repo_directory}.")
            else:
                await event.reply("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
                subprocess.run(['git', '-C', repo_directory, 'pull'], check=True)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
                await event.reply("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            for file_name in files_to_update:
                source_file_path = os.path.join(repo_directory, file_name)
                destination_file_path = os.path.join(project_directory, file_name)  # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
                if os.path.exists(source_file_path):
                    await event.reply(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {file_name}...")
                    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª (–∑–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
                    os.replace(source_file_path, destination_file_path)
                    await event.reply(f"–§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
                else:
                    await event.reply(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.")
            
            await event.reply("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞...")
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
            os.execv(sys.executable, ['python'] + sys.argv)
        
        except subprocess.CalledProcessError as err:
            await event.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {err}")
        except Exception as e:
            await event.reply(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    @client.on(events.NewMessage(pattern=r'\.deferral'))
    async def handler(event):  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        await deferred_message.handler(event)

    @client.on(events.NewMessage(pattern=r'\.tr (\w{2})'))
    async def handler(event):
        await translate_handler(event)
    @client.on(events.NewMessage(pattern=r'\.calc (.+)'))
    async def handler(event):
        await calc_handler(event)    
    @client.on(events.NewMessage(pattern=r'\.unloadmod (\w+)'))   
    async def unloadmod_handler(event):
        module_name = event.message.text.split()[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
        await handle_unloadmod(event, module_name)
              # –ü–µ—Ä–µ–¥–∞–µ–º event –∏ –∏–º—è –º–æ–¥—É–ª—è         

    @client.on(events.NewMessage(pattern=r'\.loadmod', func=lambda e: e.is_reply and e.reply_to_msg_id is not None))
    async def loadmod_handler(event):
        await handle_loadmod(event, client)
        
    @client.on(events.NewMessage(pattern=r'\.help'))
    async def help_handler(event):
    	await handle_help(event)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–º–æ—â–∏    
    @client.on(events.NewMessage(pattern=r'\.info'))
    async def info_handler(event):
        uptime = datetime.now() - start_time  # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã 
        uptime_str = str(uptime).split('.')[0]  # –£–±–∏—Ä–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã

        device = platform.system()
        user_name = event.sender.first_name  # –ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        current_status = "–ê–∫—Ç–∏–≤–µ–Ω"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        info_message = (
            f"üîç Acroka - UserBot:\n\n"
            f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü {user_name}\n"
            f"üíª –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {device}\n"
            f"‚è≥ Uptime: {uptime_str}\n"
            f"‚ú® –í–µ—Ä—Å–∏—è Telethon: {telethon.__version__}\n" 
            f"üì• Sent: {received_messages_count}\n"
            f"üì§ Accepted: {sent_messages_count}\n"
            f"üü¢ –°—Ç–∞—Ç—É—Å: {current_status}\n"
            f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users)}\n"
        )

        await event.edit(info_message)

    @client.on(events.NewMessage(pattern=r'\.ping'))
    async def ping_handler(event):
        process = subprocess.Popen(['ping', '-c', '1', 'google.com'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()
        
        if process.returncode == 0:
            result = "‚úÖ –ü–∏–Ω–≥ –∫ Google: –í—Ä–µ–º—è: {}–º—Å".format(stdout.decode().split('time=')[1].split(' ')[0])
        else:
            result = "‚ùå –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞!"

        await event.edit(result)

def generate_username():
    random_part = ''.join(random.choices(string.ascii_letters + string.digits, k=5))
    return f'acroka_{random_part}_bot'
        
GIF_URL = "https://tenor.com/vzU4iQebtgZ.gif"  # –ù–æ–≤—ã–π URL GIF
GIF_FILENAME = "welcome.gif"  # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

async def download_gif(url, filename):
    try:
        response = requests.get(url, stream=True)
        if response.status_code == 200:
            with open(filename, 'wb') as f:
                for chunk in response.iter_content(1024):
                    f.write(chunk)
            print("GIF –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å GIF –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞:", response.status_code)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ GIF:", str(e))

async def run_bot(client, token):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ASCII-–∞—Ä—Ç–∞
    ascii_art = pyfiglet.figlet_format("Acroka")
    print(ascii_art)  # –í—ã–≤–æ–¥–∏–º ASCII-–∞—Ä—Ç –≤ –∫–æ–Ω—Å–æ–ª—å

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    print("–ó–∞–ø—É—Å–∫ Acroka...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å GIF-–∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    if not os.path.exists(GIF_FILENAME):
        await download_gif(GIF_URL, GIF_FILENAME)

    bot_client = TelegramClient('bot', API_ID, API_HASH)
    await bot_client.start(bot_token=token)
    await load_all_modules(client)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    @bot_client.on(events.NewMessage(pattern='/start'))
    async def start_handler(event):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —Å —Ç–µ–∫—Å—Ç–æ–º
        await bot_client.send_file(
            event.chat_id,
            GIF_FILENAME,
            caption=(
                'üëã –ü—Ä–∏–≤–µ—Ç! –Ø - Acroka - userbot!\n'
                'üìÖ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π .info.\n\n'
                'üí¨ –ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –ø–∏—à–∏: [–ê–∫—Ä–æ–∫–∞ –°–∞–ø–ø–æ—Ä—Ç](https://t.me/acroka_support)'
            ),
            parse_mode='markdown'  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        )

    print("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    await bot_client.run_until_disconnected()
    print("–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω.")
